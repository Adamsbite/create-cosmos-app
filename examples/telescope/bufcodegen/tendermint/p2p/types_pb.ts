// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file tendermint/p2p/types.proto (package tendermint.p2p, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message tendermint.p2p.ProtocolVersion
 */
export class ProtocolVersion extends Message<ProtocolVersion> {
  /**
   * @generated from field: uint64 p2p = 1;
   */
  p2p = protoInt64.zero;

  /**
   * @generated from field: uint64 block = 2;
   */
  block = protoInt64.zero;

  /**
   * @generated from field: uint64 app = 3;
   */
  app = protoInt64.zero;

  constructor(data?: PartialMessage<ProtocolVersion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.p2p.ProtocolVersion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "p2p", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "app", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProtocolVersion {
    return new ProtocolVersion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProtocolVersion {
    return new ProtocolVersion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProtocolVersion {
    return new ProtocolVersion().fromJsonString(jsonString, options);
  }

  static equals(a: ProtocolVersion | PlainMessage<ProtocolVersion> | undefined, b: ProtocolVersion | PlainMessage<ProtocolVersion> | undefined): boolean {
    return proto3.util.equals(ProtocolVersion, a, b);
  }
}

/**
 * @generated from message tendermint.p2p.NodeInfo
 */
export class NodeInfo extends Message<NodeInfo> {
  /**
   * @generated from field: tendermint.p2p.ProtocolVersion protocol_version = 1;
   */
  protocolVersion?: ProtocolVersion;

  /**
   * @generated from field: string node_id = 2;
   */
  nodeId = "";

  /**
   * @generated from field: string listen_addr = 3;
   */
  listenAddr = "";

  /**
   * @generated from field: string network = 4;
   */
  network = "";

  /**
   * @generated from field: string version = 5;
   */
  version = "";

  /**
   * @generated from field: bytes channels = 6;
   */
  channels = new Uint8Array(0);

  /**
   * @generated from field: string moniker = 7;
   */
  moniker = "";

  /**
   * @generated from field: tendermint.p2p.NodeInfoOther other = 8;
   */
  other?: NodeInfoOther;

  constructor(data?: PartialMessage<NodeInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.p2p.NodeInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "protocol_version", kind: "message", T: ProtocolVersion },
    { no: 2, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "listen_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "channels", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "moniker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "other", kind: "message", T: NodeInfoOther },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeInfo {
    return new NodeInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeInfo {
    return new NodeInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeInfo {
    return new NodeInfo().fromJsonString(jsonString, options);
  }

  static equals(a: NodeInfo | PlainMessage<NodeInfo> | undefined, b: NodeInfo | PlainMessage<NodeInfo> | undefined): boolean {
    return proto3.util.equals(NodeInfo, a, b);
  }
}

/**
 * @generated from message tendermint.p2p.NodeInfoOther
 */
export class NodeInfoOther extends Message<NodeInfoOther> {
  /**
   * @generated from field: string tx_index = 1;
   */
  txIndex = "";

  /**
   * @generated from field: string rpc_address = 2;
   */
  rpcAddress = "";

  constructor(data?: PartialMessage<NodeInfoOther>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.p2p.NodeInfoOther";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rpc_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeInfoOther {
    return new NodeInfoOther().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeInfoOther {
    return new NodeInfoOther().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeInfoOther {
    return new NodeInfoOther().fromJsonString(jsonString, options);
  }

  static equals(a: NodeInfoOther | PlainMessage<NodeInfoOther> | undefined, b: NodeInfoOther | PlainMessage<NodeInfoOther> | undefined): boolean {
    return proto3.util.equals(NodeInfoOther, a, b);
  }
}

/**
 * @generated from message tendermint.p2p.PeerInfo
 */
export class PeerInfo extends Message<PeerInfo> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: repeated tendermint.p2p.PeerAddressInfo address_info = 2;
   */
  addressInfo: PeerAddressInfo[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp last_connected = 3;
   */
  lastConnected?: Timestamp;

  constructor(data?: PartialMessage<PeerInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.p2p.PeerInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address_info", kind: "message", T: PeerAddressInfo, repeated: true },
    { no: 3, name: "last_connected", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeerInfo {
    return new PeerInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeerInfo {
    return new PeerInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeerInfo {
    return new PeerInfo().fromJsonString(jsonString, options);
  }

  static equals(a: PeerInfo | PlainMessage<PeerInfo> | undefined, b: PeerInfo | PlainMessage<PeerInfo> | undefined): boolean {
    return proto3.util.equals(PeerInfo, a, b);
  }
}

/**
 * @generated from message tendermint.p2p.PeerAddressInfo
 */
export class PeerAddressInfo extends Message<PeerAddressInfo> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: google.protobuf.Timestamp last_dial_success = 2;
   */
  lastDialSuccess?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp last_dial_failure = 3;
   */
  lastDialFailure?: Timestamp;

  /**
   * @generated from field: uint32 dial_failures = 4;
   */
  dialFailures = 0;

  constructor(data?: PartialMessage<PeerAddressInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tendermint.p2p.PeerAddressInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_dial_success", kind: "message", T: Timestamp },
    { no: 3, name: "last_dial_failure", kind: "message", T: Timestamp },
    { no: 4, name: "dial_failures", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeerAddressInfo {
    return new PeerAddressInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeerAddressInfo {
    return new PeerAddressInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeerAddressInfo {
    return new PeerAddressInfo().fromJsonString(jsonString, options);
  }

  static equals(a: PeerAddressInfo | PlainMessage<PeerAddressInfo> | undefined, b: PeerAddressInfo | PlainMessage<PeerAddressInfo> | undefined): boolean {
    return proto3.util.equals(PeerAddressInfo, a, b);
  }
}

