// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmwasm/wasm/v1/tx.proto (package cosmwasm.wasm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { AccessConfig } from "./types_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * MsgStoreCode submit Wasm code to the system
 *
 * @generated from message cosmwasm.wasm.v1.MsgStoreCode
 */
export class MsgStoreCode extends Message<MsgStoreCode> {
  /**
   * Sender is the that actor that signed the messages
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * WASMByteCode can be raw or gzip compressed
   *
   * @generated from field: bytes wasm_byte_code = 2;
   */
  wasmByteCode = new Uint8Array(0);

  /**
   * InstantiatePermission access control to apply on contract creation,
   * optional
   *
   * @generated from field: cosmwasm.wasm.v1.AccessConfig instantiate_permission = 5;
   */
  instantiatePermission?: AccessConfig;

  constructor(data?: PartialMessage<MsgStoreCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.MsgStoreCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wasm_byte_code", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "instantiate_permission", kind: "message", T: AccessConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgStoreCode {
    return new MsgStoreCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgStoreCode {
    return new MsgStoreCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgStoreCode {
    return new MsgStoreCode().fromJsonString(jsonString, options);
  }

  static equals(a: MsgStoreCode | PlainMessage<MsgStoreCode> | undefined, b: MsgStoreCode | PlainMessage<MsgStoreCode> | undefined): boolean {
    return proto3.util.equals(MsgStoreCode, a, b);
  }
}

/**
 * MsgStoreCodeResponse returns store result data.
 *
 * @generated from message cosmwasm.wasm.v1.MsgStoreCodeResponse
 */
export class MsgStoreCodeResponse extends Message<MsgStoreCodeResponse> {
  /**
   * CodeID is the reference to the stored WASM code
   *
   * @generated from field: uint64 code_id = 1;
   */
  codeId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgStoreCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.MsgStoreCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgStoreCodeResponse {
    return new MsgStoreCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgStoreCodeResponse {
    return new MsgStoreCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgStoreCodeResponse {
    return new MsgStoreCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgStoreCodeResponse | PlainMessage<MsgStoreCodeResponse> | undefined, b: MsgStoreCodeResponse | PlainMessage<MsgStoreCodeResponse> | undefined): boolean {
    return proto3.util.equals(MsgStoreCodeResponse, a, b);
  }
}

/**
 * MsgInstantiateContract create a new smart contract instance for the given
 * code id.
 *
 * @generated from message cosmwasm.wasm.v1.MsgInstantiateContract
 */
export class MsgInstantiateContract extends Message<MsgInstantiateContract> {
  /**
   * Sender is the that actor that signed the messages
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * Admin is an optional address that can execute migrations
   *
   * @generated from field: string admin = 2;
   */
  admin = "";

  /**
   * CodeID is the reference to the stored WASM code
   *
   * @generated from field: uint64 code_id = 3;
   */
  codeId = protoInt64.zero;

  /**
   * Label is optional metadata to be stored with a contract instance.
   *
   * @generated from field: string label = 4;
   */
  label = "";

  /**
   * Msg json encoded message to be passed to the contract on instantiation
   *
   * @generated from field: bytes msg = 5;
   */
  msg = new Uint8Array(0);

  /**
   * Funds coins that are transferred to the contract on instantiation
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin funds = 6;
   */
  funds: Coin[] = [];

  constructor(data?: PartialMessage<MsgInstantiateContract>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.MsgInstantiateContract";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "funds", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInstantiateContract {
    return new MsgInstantiateContract().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInstantiateContract {
    return new MsgInstantiateContract().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInstantiateContract {
    return new MsgInstantiateContract().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInstantiateContract | PlainMessage<MsgInstantiateContract> | undefined, b: MsgInstantiateContract | PlainMessage<MsgInstantiateContract> | undefined): boolean {
    return proto3.util.equals(MsgInstantiateContract, a, b);
  }
}

/**
 * MsgInstantiateContractResponse return instantiation result data
 *
 * @generated from message cosmwasm.wasm.v1.MsgInstantiateContractResponse
 */
export class MsgInstantiateContractResponse extends Message<MsgInstantiateContractResponse> {
  /**
   * Address is the bech32 address of the new contract instance.
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * Data contains base64-encoded bytes to returned from the contract
   *
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgInstantiateContractResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.MsgInstantiateContractResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInstantiateContractResponse {
    return new MsgInstantiateContractResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInstantiateContractResponse {
    return new MsgInstantiateContractResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInstantiateContractResponse {
    return new MsgInstantiateContractResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInstantiateContractResponse | PlainMessage<MsgInstantiateContractResponse> | undefined, b: MsgInstantiateContractResponse | PlainMessage<MsgInstantiateContractResponse> | undefined): boolean {
    return proto3.util.equals(MsgInstantiateContractResponse, a, b);
  }
}

/**
 * MsgExecuteContract submits the given message data to a smart contract
 *
 * @generated from message cosmwasm.wasm.v1.MsgExecuteContract
 */
export class MsgExecuteContract extends Message<MsgExecuteContract> {
  /**
   * Sender is the that actor that signed the messages
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * Contract is the address of the smart contract
   *
   * @generated from field: string contract = 2;
   */
  contract = "";

  /**
   * Msg json encoded message to be passed to the contract
   *
   * @generated from field: bytes msg = 3;
   */
  msg = new Uint8Array(0);

  /**
   * Funds coins that are transferred to the contract on execution
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin funds = 5;
   */
  funds: Coin[] = [];

  constructor(data?: PartialMessage<MsgExecuteContract>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.MsgExecuteContract";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "funds", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteContract {
    return new MsgExecuteContract().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteContract {
    return new MsgExecuteContract().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteContract {
    return new MsgExecuteContract().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecuteContract | PlainMessage<MsgExecuteContract> | undefined, b: MsgExecuteContract | PlainMessage<MsgExecuteContract> | undefined): boolean {
    return proto3.util.equals(MsgExecuteContract, a, b);
  }
}

/**
 * MsgExecuteContractResponse returns execution result data.
 *
 * @generated from message cosmwasm.wasm.v1.MsgExecuteContractResponse
 */
export class MsgExecuteContractResponse extends Message<MsgExecuteContractResponse> {
  /**
   * Data contains base64-encoded bytes to returned from the contract
   *
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgExecuteContractResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.MsgExecuteContractResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteContractResponse {
    return new MsgExecuteContractResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteContractResponse {
    return new MsgExecuteContractResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteContractResponse {
    return new MsgExecuteContractResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecuteContractResponse | PlainMessage<MsgExecuteContractResponse> | undefined, b: MsgExecuteContractResponse | PlainMessage<MsgExecuteContractResponse> | undefined): boolean {
    return proto3.util.equals(MsgExecuteContractResponse, a, b);
  }
}

/**
 * MsgMigrateContract runs a code upgrade/ downgrade for a smart contract
 *
 * @generated from message cosmwasm.wasm.v1.MsgMigrateContract
 */
export class MsgMigrateContract extends Message<MsgMigrateContract> {
  /**
   * Sender is the that actor that signed the messages
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * Contract is the address of the smart contract
   *
   * @generated from field: string contract = 2;
   */
  contract = "";

  /**
   * CodeID references the new WASM code
   *
   * @generated from field: uint64 code_id = 3;
   */
  codeId = protoInt64.zero;

  /**
   * Msg json encoded message to be passed to the contract on migration
   *
   * @generated from field: bytes msg = 4;
   */
  msg = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgMigrateContract>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.MsgMigrateContract";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgMigrateContract {
    return new MsgMigrateContract().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgMigrateContract {
    return new MsgMigrateContract().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgMigrateContract {
    return new MsgMigrateContract().fromJsonString(jsonString, options);
  }

  static equals(a: MsgMigrateContract | PlainMessage<MsgMigrateContract> | undefined, b: MsgMigrateContract | PlainMessage<MsgMigrateContract> | undefined): boolean {
    return proto3.util.equals(MsgMigrateContract, a, b);
  }
}

/**
 * MsgMigrateContractResponse returns contract migration result data.
 *
 * @generated from message cosmwasm.wasm.v1.MsgMigrateContractResponse
 */
export class MsgMigrateContractResponse extends Message<MsgMigrateContractResponse> {
  /**
   * Data contains same raw bytes returned as data from the wasm contract.
   * (May be empty)
   *
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgMigrateContractResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.MsgMigrateContractResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgMigrateContractResponse {
    return new MsgMigrateContractResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgMigrateContractResponse {
    return new MsgMigrateContractResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgMigrateContractResponse {
    return new MsgMigrateContractResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgMigrateContractResponse | PlainMessage<MsgMigrateContractResponse> | undefined, b: MsgMigrateContractResponse | PlainMessage<MsgMigrateContractResponse> | undefined): boolean {
    return proto3.util.equals(MsgMigrateContractResponse, a, b);
  }
}

/**
 * MsgUpdateAdmin sets a new admin for a smart contract
 *
 * @generated from message cosmwasm.wasm.v1.MsgUpdateAdmin
 */
export class MsgUpdateAdmin extends Message<MsgUpdateAdmin> {
  /**
   * Sender is the that actor that signed the messages
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * NewAdmin address to be set
   *
   * @generated from field: string new_admin = 2;
   */
  newAdmin = "";

  /**
   * Contract is the address of the smart contract
   *
   * @generated from field: string contract = 3;
   */
  contract = "";

  constructor(data?: PartialMessage<MsgUpdateAdmin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.MsgUpdateAdmin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateAdmin {
    return new MsgUpdateAdmin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateAdmin {
    return new MsgUpdateAdmin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateAdmin {
    return new MsgUpdateAdmin().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateAdmin | PlainMessage<MsgUpdateAdmin> | undefined, b: MsgUpdateAdmin | PlainMessage<MsgUpdateAdmin> | undefined): boolean {
    return proto3.util.equals(MsgUpdateAdmin, a, b);
  }
}

/**
 * MsgUpdateAdminResponse returns empty data
 *
 * @generated from message cosmwasm.wasm.v1.MsgUpdateAdminResponse
 */
export class MsgUpdateAdminResponse extends Message<MsgUpdateAdminResponse> {
  constructor(data?: PartialMessage<MsgUpdateAdminResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.MsgUpdateAdminResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateAdminResponse {
    return new MsgUpdateAdminResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateAdminResponse {
    return new MsgUpdateAdminResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateAdminResponse {
    return new MsgUpdateAdminResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateAdminResponse | PlainMessage<MsgUpdateAdminResponse> | undefined, b: MsgUpdateAdminResponse | PlainMessage<MsgUpdateAdminResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateAdminResponse, a, b);
  }
}

/**
 * MsgClearAdmin removes any admin stored for a smart contract
 *
 * @generated from message cosmwasm.wasm.v1.MsgClearAdmin
 */
export class MsgClearAdmin extends Message<MsgClearAdmin> {
  /**
   * Sender is the that actor that signed the messages
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * Contract is the address of the smart contract
   *
   * @generated from field: string contract = 3;
   */
  contract = "";

  constructor(data?: PartialMessage<MsgClearAdmin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.MsgClearAdmin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClearAdmin {
    return new MsgClearAdmin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClearAdmin {
    return new MsgClearAdmin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClearAdmin {
    return new MsgClearAdmin().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClearAdmin | PlainMessage<MsgClearAdmin> | undefined, b: MsgClearAdmin | PlainMessage<MsgClearAdmin> | undefined): boolean {
    return proto3.util.equals(MsgClearAdmin, a, b);
  }
}

/**
 * MsgClearAdminResponse returns empty data
 *
 * @generated from message cosmwasm.wasm.v1.MsgClearAdminResponse
 */
export class MsgClearAdminResponse extends Message<MsgClearAdminResponse> {
  constructor(data?: PartialMessage<MsgClearAdminResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.MsgClearAdminResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClearAdminResponse {
    return new MsgClearAdminResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClearAdminResponse {
    return new MsgClearAdminResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClearAdminResponse {
    return new MsgClearAdminResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClearAdminResponse | PlainMessage<MsgClearAdminResponse> | undefined, b: MsgClearAdminResponse | PlainMessage<MsgClearAdminResponse> | undefined): boolean {
    return proto3.util.equals(MsgClearAdminResponse, a, b);
  }
}

