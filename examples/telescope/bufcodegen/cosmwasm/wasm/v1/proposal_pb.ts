// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmwasm/wasm/v1/proposal.proto (package cosmwasm.wasm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { AccessConfig } from "./types_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * StoreCodeProposal gov proposal content type to submit WASM code to the system
 *
 * @generated from message cosmwasm.wasm.v1.StoreCodeProposal
 */
export class StoreCodeProposal extends Message<StoreCodeProposal> {
  /**
   * Title is a short summary
   *
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * Description is a human readable text
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * RunAs is the address that is passed to the contract's environment as sender
   *
   * @generated from field: string run_as = 3;
   */
  runAs = "";

  /**
   * WASMByteCode can be raw or gzip compressed
   *
   * @generated from field: bytes wasm_byte_code = 4;
   */
  wasmByteCode = new Uint8Array(0);

  /**
   * InstantiatePermission to apply on contract creation, optional
   *
   * @generated from field: cosmwasm.wasm.v1.AccessConfig instantiate_permission = 7;
   */
  instantiatePermission?: AccessConfig;

  constructor(data?: PartialMessage<StoreCodeProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.StoreCodeProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "run_as", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "wasm_byte_code", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "instantiate_permission", kind: "message", T: AccessConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoreCodeProposal {
    return new StoreCodeProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoreCodeProposal {
    return new StoreCodeProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoreCodeProposal {
    return new StoreCodeProposal().fromJsonString(jsonString, options);
  }

  static equals(a: StoreCodeProposal | PlainMessage<StoreCodeProposal> | undefined, b: StoreCodeProposal | PlainMessage<StoreCodeProposal> | undefined): boolean {
    return proto3.util.equals(StoreCodeProposal, a, b);
  }
}

/**
 * InstantiateContractProposal gov proposal content type to instantiate a
 * contract.
 *
 * @generated from message cosmwasm.wasm.v1.InstantiateContractProposal
 */
export class InstantiateContractProposal extends Message<InstantiateContractProposal> {
  /**
   * Title is a short summary
   *
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * Description is a human readable text
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * RunAs is the address that is passed to the contract's environment as sender
   *
   * @generated from field: string run_as = 3;
   */
  runAs = "";

  /**
   * Admin is an optional address that can execute migrations
   *
   * @generated from field: string admin = 4;
   */
  admin = "";

  /**
   * CodeID is the reference to the stored WASM code
   *
   * @generated from field: uint64 code_id = 5;
   */
  codeId = protoInt64.zero;

  /**
   * Label is optional metadata to be stored with a constract instance.
   *
   * @generated from field: string label = 6;
   */
  label = "";

  /**
   * Msg json encoded message to be passed to the contract on instantiation
   *
   * @generated from field: bytes msg = 7;
   */
  msg = new Uint8Array(0);

  /**
   * Funds coins that are transferred to the contract on instantiation
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin funds = 8;
   */
  funds: Coin[] = [];

  constructor(data?: PartialMessage<InstantiateContractProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.InstantiateContractProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "run_as", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "funds", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstantiateContractProposal {
    return new InstantiateContractProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstantiateContractProposal {
    return new InstantiateContractProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstantiateContractProposal {
    return new InstantiateContractProposal().fromJsonString(jsonString, options);
  }

  static equals(a: InstantiateContractProposal | PlainMessage<InstantiateContractProposal> | undefined, b: InstantiateContractProposal | PlainMessage<InstantiateContractProposal> | undefined): boolean {
    return proto3.util.equals(InstantiateContractProposal, a, b);
  }
}

/**
 * MigrateContractProposal gov proposal content type to migrate a contract.
 *
 * @generated from message cosmwasm.wasm.v1.MigrateContractProposal
 */
export class MigrateContractProposal extends Message<MigrateContractProposal> {
  /**
   * Title is a short summary
   *
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * Description is a human readable text
   *
   * Note: skipping 3 as this was previously used for unneeded run_as
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * Contract is the address of the smart contract
   *
   * @generated from field: string contract = 4;
   */
  contract = "";

  /**
   * CodeID references the new WASM codesudo
   *
   * @generated from field: uint64 code_id = 5;
   */
  codeId = protoInt64.zero;

  /**
   * Msg json encoded message to be passed to the contract on migration
   *
   * @generated from field: bytes msg = 6;
   */
  msg = new Uint8Array(0);

  constructor(data?: PartialMessage<MigrateContractProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.MigrateContractProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigrateContractProposal {
    return new MigrateContractProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigrateContractProposal {
    return new MigrateContractProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigrateContractProposal {
    return new MigrateContractProposal().fromJsonString(jsonString, options);
  }

  static equals(a: MigrateContractProposal | PlainMessage<MigrateContractProposal> | undefined, b: MigrateContractProposal | PlainMessage<MigrateContractProposal> | undefined): boolean {
    return proto3.util.equals(MigrateContractProposal, a, b);
  }
}

/**
 * SudoContractProposal gov proposal content type to call sudo on a contract.
 *
 * @generated from message cosmwasm.wasm.v1.SudoContractProposal
 */
export class SudoContractProposal extends Message<SudoContractProposal> {
  /**
   * Title is a short summary
   *
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * Description is a human readable text
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * Contract is the address of the smart contract
   *
   * @generated from field: string contract = 3;
   */
  contract = "";

  /**
   * Msg json encoded message to be passed to the contract as sudo
   *
   * @generated from field: bytes msg = 4;
   */
  msg = new Uint8Array(0);

  constructor(data?: PartialMessage<SudoContractProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.SudoContractProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoContractProposal {
    return new SudoContractProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoContractProposal {
    return new SudoContractProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoContractProposal {
    return new SudoContractProposal().fromJsonString(jsonString, options);
  }

  static equals(a: SudoContractProposal | PlainMessage<SudoContractProposal> | undefined, b: SudoContractProposal | PlainMessage<SudoContractProposal> | undefined): boolean {
    return proto3.util.equals(SudoContractProposal, a, b);
  }
}

/**
 * ExecuteContractProposal gov proposal content type to call execute on a
 * contract.
 *
 * @generated from message cosmwasm.wasm.v1.ExecuteContractProposal
 */
export class ExecuteContractProposal extends Message<ExecuteContractProposal> {
  /**
   * Title is a short summary
   *
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * Description is a human readable text
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * RunAs is the address that is passed to the contract's environment as sender
   *
   * @generated from field: string run_as = 3;
   */
  runAs = "";

  /**
   * Contract is the address of the smart contract
   *
   * @generated from field: string contract = 4;
   */
  contract = "";

  /**
   * Msg json encoded message to be passed to the contract as execute
   *
   * @generated from field: bytes msg = 5;
   */
  msg = new Uint8Array(0);

  /**
   * Funds coins that are transferred to the contract on instantiation
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin funds = 6;
   */
  funds: Coin[] = [];

  constructor(data?: PartialMessage<ExecuteContractProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.ExecuteContractProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "run_as", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "funds", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteContractProposal {
    return new ExecuteContractProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteContractProposal {
    return new ExecuteContractProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteContractProposal {
    return new ExecuteContractProposal().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteContractProposal | PlainMessage<ExecuteContractProposal> | undefined, b: ExecuteContractProposal | PlainMessage<ExecuteContractProposal> | undefined): boolean {
    return proto3.util.equals(ExecuteContractProposal, a, b);
  }
}

/**
 * UpdateAdminProposal gov proposal content type to set an admin for a contract.
 *
 * @generated from message cosmwasm.wasm.v1.UpdateAdminProposal
 */
export class UpdateAdminProposal extends Message<UpdateAdminProposal> {
  /**
   * Title is a short summary
   *
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * Description is a human readable text
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * NewAdmin address to be set
   *
   * @generated from field: string new_admin = 3;
   */
  newAdmin = "";

  /**
   * Contract is the address of the smart contract
   *
   * @generated from field: string contract = 4;
   */
  contract = "";

  constructor(data?: PartialMessage<UpdateAdminProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.UpdateAdminProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAdminProposal {
    return new UpdateAdminProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAdminProposal {
    return new UpdateAdminProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAdminProposal {
    return new UpdateAdminProposal().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAdminProposal | PlainMessage<UpdateAdminProposal> | undefined, b: UpdateAdminProposal | PlainMessage<UpdateAdminProposal> | undefined): boolean {
    return proto3.util.equals(UpdateAdminProposal, a, b);
  }
}

/**
 * ClearAdminProposal gov proposal content type to clear the admin of a
 * contract.
 *
 * @generated from message cosmwasm.wasm.v1.ClearAdminProposal
 */
export class ClearAdminProposal extends Message<ClearAdminProposal> {
  /**
   * Title is a short summary
   *
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * Description is a human readable text
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * Contract is the address of the smart contract
   *
   * @generated from field: string contract = 3;
   */
  contract = "";

  constructor(data?: PartialMessage<ClearAdminProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.ClearAdminProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClearAdminProposal {
    return new ClearAdminProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClearAdminProposal {
    return new ClearAdminProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClearAdminProposal {
    return new ClearAdminProposal().fromJsonString(jsonString, options);
  }

  static equals(a: ClearAdminProposal | PlainMessage<ClearAdminProposal> | undefined, b: ClearAdminProposal | PlainMessage<ClearAdminProposal> | undefined): boolean {
    return proto3.util.equals(ClearAdminProposal, a, b);
  }
}

/**
 * PinCodesProposal gov proposal content type to pin a set of code ids in the
 * wasmvm cache.
 *
 * @generated from message cosmwasm.wasm.v1.PinCodesProposal
 */
export class PinCodesProposal extends Message<PinCodesProposal> {
  /**
   * Title is a short summary
   *
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * Description is a human readable text
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * CodeIDs references the new WASM codes
   *
   * @generated from field: repeated uint64 code_ids = 3;
   */
  codeIds: bigint[] = [];

  constructor(data?: PartialMessage<PinCodesProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.PinCodesProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PinCodesProposal {
    return new PinCodesProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PinCodesProposal {
    return new PinCodesProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PinCodesProposal {
    return new PinCodesProposal().fromJsonString(jsonString, options);
  }

  static equals(a: PinCodesProposal | PlainMessage<PinCodesProposal> | undefined, b: PinCodesProposal | PlainMessage<PinCodesProposal> | undefined): boolean {
    return proto3.util.equals(PinCodesProposal, a, b);
  }
}

/**
 * UnpinCodesProposal gov proposal content type to unpin a set of code ids in
 * the wasmvm cache.
 *
 * @generated from message cosmwasm.wasm.v1.UnpinCodesProposal
 */
export class UnpinCodesProposal extends Message<UnpinCodesProposal> {
  /**
   * Title is a short summary
   *
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * Description is a human readable text
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * CodeIDs references the WASM codes
   *
   * @generated from field: repeated uint64 code_ids = 3;
   */
  codeIds: bigint[] = [];

  constructor(data?: PartialMessage<UnpinCodesProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.UnpinCodesProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnpinCodesProposal {
    return new UnpinCodesProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnpinCodesProposal {
    return new UnpinCodesProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnpinCodesProposal {
    return new UnpinCodesProposal().fromJsonString(jsonString, options);
  }

  static equals(a: UnpinCodesProposal | PlainMessage<UnpinCodesProposal> | undefined, b: UnpinCodesProposal | PlainMessage<UnpinCodesProposal> | undefined): boolean {
    return proto3.util.equals(UnpinCodesProposal, a, b);
  }
}

